# Build the UI binary
FROM cgr.dev/chainguard/go:latest AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.sum ./
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

COPY ui/server ui/server

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -a -o spiffe-enable-ui ui/server/main.go

FROM cgr.dev/chainguard/static:latest
WORKDIR /
COPY --from=builder /workspace/spiffe-enable-ui .
# The Chainguard image has a single user 'nonroot' with uid '65532', belonging to gid '65532'.
USER nonroot

ENTRYPOINT ["/spiffe-enable-ui"]
